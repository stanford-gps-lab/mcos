function configParameters = config()
% This function sets the parameters to be run in the simulation. When the
% simulation is ready, type 'main' into the command line. Make sure that
% you have added mcos to your path

%% Set data to load if desired. 
% .mat file should be in main directory or .the path should be added.

%% Assign configuration parameters to ConfigParameters
% Assign values

scheme = 'TESLA'; % Scheme - 'TESLA' or 'ECDSA'
saveData = true;   % SaveData - true or false
frequency = 'L5';   % Frequency - 'L1' or 'L5'
channel = 'Q';  % Channel - 'I' or 'Q'
numDiffKeys = 1;    % NumDiffKeys - Number of different keys used to sign data. Nominally 1.
per = 0;    % PER - Page Error Rate. Nominally 0.
minLengthOTARMessage = 0;   % MinLengthOTARMessage [messages] - minimum length that an OTAR message is. Nominally 0.
tba = 6;    % TBA [s] - Time between authentications. Must be greater than the length of the signature
simLength = 1000;   % SimLength [OTAR messages] - How many OTAR messages are generated for broadcast
numUsers = 1;   % NumUsers - Number of users that start demodulating at each time interval. Nominally 1.
weightingScheme = [];   % WeightingScheme - TODO: WeightingScheme to be defined
messageConfiguration = [];  % MessageConfiguration - File containing message configuration information. 
broadcastGenerator = [];    % BroadcastGenerator - Which function to call when generating OMT broadcast

% Write values to ConfigParameters class
configParameters = mcos.ConfigParameters(...
    'Scheme', scheme,...
    'SaveData', saveData,...
    'Frequency', frequency,...
    'Channel', channel,...
    'NumDiffKeys', numDiffKeys,...
    'PER', per,...
    'MinLengthOTARMessage', minLengthOTARMessage,...
    'TBA', tba,...
    'SimLength', simLength,...
    'NumUsers', numUsers,...
    'WeightingScheme', weightingScheme,...
    'MessageConfiguration', messageConfiguration,...
    'BroadcastGenerator', broadcastGenerator...
    );

end



